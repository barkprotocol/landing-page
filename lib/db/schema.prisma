// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  role           UserRole  @default(USER)

  accounts       Account[]
  sessions       Session[]
  posts          Post[]
  comments       Comment[]
  profile        Profile?
  wallets        Wallet[]
  transactions   Transaction[]
  blinks         Blink[]
  settings       Settings?
  notifications  Notification[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String    @id @default(cuid())
  title     String
  content   String?
  published Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  authorId  String
  author    User      @relation(fields: [authorId], references: [id])
  comments  Comment[]
  tags      Tag[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  postId    String
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  posts Post[]
}

model Profile {
  id       String  @id @default(cuid())
  bio      String?
  userId   String  @unique
  user     User    @relation(fields: [userId], references: [id])
  location String?
  website  String?
}

model Wallet {
  id            String         @id @default(cuid())
  address       String         @unique
  balance       Float          @default(0)
  userId        String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [userId], references: [id])
  transactions  Transaction[]
  walletType    WalletType     @default(PERSONAL)
  currency      CurrencyType   @default(SOL)
  isDefault     Boolean        @default(false)
}

model Transaction {
  id                String            @id @default(cuid())
  amount            Float
  description       String?
  type              TransactionType
  status            TransactionStatus
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  userId            String
  user              User              @relation(fields: [userId], references: [id])
  walletId          String
  wallet            Wallet            @relation(fields: [walletId], references: [id])
  fee               Float?
  blockchainTxId    String?          @unique
}

model Blink {
  id          String      @id @default(cuid())
  label       String
  description String?
  mint        String
  commission  Boolean     @default(false)
  percentage  Float?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  status      BlinkStatus @default(ACTIVE)
  expiresAt   DateTime?
  usageCount  Int         @default(0)
  maxUses     Int?
}

model Settings {
  id            String   @id @default(cuid())
  userId        String   @unique
  preferences   Json     @default("{}")
  notifications Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
  language      String   @default("en")
  timezone      String   @default("UTC")
}

model Notification {
  id        String             @id @default(cuid())
  userId    String
  user      User               @relation(fields: [userId], references: [id])
  type      NotificationType
  message   String
  read      Boolean            @default(false)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
  PAYMENT
  BLINK
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum BlinkStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

enum WalletType {
  PERSONAL
  BUSINESS
  SAVINGS
}

enum CurrencyType {
  SOL
  MILTON
  USDC
  BTC
  ETH
}

enum NotificationType {
  TRANSACTION
  SYSTEM
  SECURITY
  MARKETING
}
